# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Edit_Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
import pyqtgraph as pg
from PyQt5.QtWidgets import QWidget, QMainWindow, QGraphicsView
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QRect
import XYBDeepLearn
import torch as tr

import XYBQt


def circle_random(cx, cy, theta, r):
    rr = r + np.random.uniform(0.1, 0.5)
    xc = cx + rr * np.cos(theta) - 0.5
    yc = cy + rr * np.sin(theta) - 0.5
    xc = xc
    return [np.random.uniform(-r, r), np.random.uniform(-r, r)]
    return [xc * 0.5, yc * 0.5]


class Ui_MainWindow(object):
    time_loop = QTimer()
    model = XYBDeepLearn.XYBDeepLearning()
    qt_graph = XYBQt.XYBQtGraphLayoutWidget()
    app = pg.mkQApp('Test Window')

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(611, 242)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setMinimumSize(QtCore.QSize(100, 0))
        self.frame_2.setMaximumSize(QtCore.QSize(100, 16777215))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.W_Start = QtWidgets.QPushButton(self.frame_2)
        self.W_Start.setObjectName("W_Start")
        self.verticalLayout.addWidget(self.W_Start)
        self.W_Stop = QtWidgets.QPushButton(self.frame_2)
        self.W_Stop.setObjectName("W_Stop")
        self.verticalLayout.addWidget(self.W_Stop)
        self.W_Reset = QtWidgets.QPushButton(self.frame_2)
        self.W_Reset.setObjectName("W_Reset")
        self.verticalLayout.addWidget(self.W_Reset)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.horizontalLayout.addWidget(self.frame_2)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setSpacing(0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.W_Graph = QtWidgets.QTabWidget(self.frame)
        self.W_Graph.setObjectName("W_Graph")
        self.gridLayout_3.addWidget(self.W_Graph, 0, 0, 1, 1)
        self.horizontalLayout.addWidget(self.frame)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 611, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.qt_graph = XYBQt.XYBQtGraphLayoutWidget()
        self.W_Graph.addTab(self.qt_graph.getWidget(), 'Window01')
        view_point = self.qt_graph.addPlot('RandomPoint')
        view_coss = self.qt_graph.addPlot('Coss')

        # Image 显示
        view_point.addItem('ImageShow', 'ImageItem')

        # 数据显示
        view_point.addItem('ScatterPoint', 'ScatterPlotItem')

        # Coss显示
        view_coss.addItem('Plot', 'PlotDataItem')

        self.Func_Reset()
        self.W_Start.clicked.connect(self.Func_Start)
        self.W_Stop.clicked.connect(self.Func_Stop)
        self.W_Reset.clicked.connect(self.Func_Reset)
        self.time_loop.timeout.connect(self.Func_Loop)

    time_count = 0
    loop_num = []
    calculate_coss = []

    def Func_Loop(self):
        self.time_count += 1
        coss = self.model.train(learn=0.01, mountain=0.1, mini_batch=100, decay_rate=0.01)
        self.loop_num.append(self.time_count)
        self.calculate_coss.append(coss.data.cpu().numpy())
        self.qt_graph.getPlot('Coss').getItem('Plot').setData(self.loop_num, self.calculate_coss)

        # Image显示
        res = self.model.get_result(self.data_y)
        img_data_r = res[0].reshape(self.img_size, self.img_size, 1).cpu()
        img_data_g = res[1].reshape(self.img_size, self.img_size, 1).cpu()
        img_data_b = tr.zeros(self.img_size, self.img_size, 1)
        img_data_a = tr.ones(self.img_size, self.img_size, 1)
        img_data = tr.cat([img_data_r, img_data_g, img_data_b, img_data_a], dim=2)
        img_data = img_data.data.numpy() * 255
        self.qt_graph.getPlot('RandomPoint').getItem('ImageShow').setImage(img_data)
        self.qt_graph.getPlot('RandomPoint').getItem('ImageShow').setRect(QRect(-1, -1, 2, 2))

    data_y = []
    img_size = 128
    img_width = 2
    img_start = [-1.0, -1.0]

    def Func_Start(self):
        one_step = self.img_width / self.img_size
        self.data_y = []
        for i in range(0, self.img_size):
            for j in range(0, self.img_size):
                x = self.img_start[0] + i * one_step - one_step * 0.5
                y = self.img_start[1] + j * one_step - one_step * 0.5
                self.data_y.append(tr.tensor([[float(x)], [float(y)]]))
        self.data_y = tr.cat(self.data_y, dim=1)
        self.time_loop.start(24)
        print('Start')

    def Func_Stop(self):
        self.time_loop.stop()
        print('Stop')

    def Func_Reset(self):
        self.loop_num = []
        self.calculate_coss = []
        # 深度学习模型实例化
        self.model = XYBDeepLearn.XYBDeepLearning()

        # 初始化点数据
        res_render = []
        for i in range(0, 100):
            pos = circle_random(0.5, 0.5, np.random.uniform(0.0, 360.0), 0.2)
            res_render.append({'pos': pos, 'brush': pg.mkBrush(color=(0, 255, 0, 255))})
            self.model.add_data(tr.tensor([[float(pos[0])], [float(pos[1])]]), tr.tensor([[0.0], [1.0]]))

            pos = circle_random(0.5, 0.5, np.random.uniform(0.0, 360.0), 1.0)
            res_render.append({'pos': pos, 'brush': pg.mkBrush(color=(255, 0, 0, 255))})
            self.model.add_data(tr.tensor([[float(pos[0])], [float(pos[1])]]), tr.tensor([[1.0], [0.0]]))

        self.qt_graph.getPlot('RandomPoint').getItem('ScatterPoint').setData(res_render)
        print(self.qt_graph.getPlot('RandomPoint').getItem('ScatterPoint'))

        # 神经元申明
        self.model.add_neuron(neuron_num=50, activation='tan_h', neuron_type='input')
        self.model.add_neuron(neuron_num=15, activation='tan_h', neuron_type='layer')
        self.model.add_neuron(neuron_num=3, activation='tan_h', neuron_type='layer')
        self.model.add_neuron(neuron_num=2, activation='softmax', neuron_type='output')
        print('Reset Data')

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.W_Start.setText(_translate("MainWindow", "Start"))
        self.W_Stop.setText(_translate("MainWindow", "Stop"))
        self.W_Reset.setText(_translate("MainWindow", "Reset"))
